Started by user Maxime Zammit
Running as SYSTEM
Building in workspace /var/jenkins_home/workspace/04-gol-final-zammit
Copying file to gol.asm
[04-gol-final-zammit] $ /bin/bash -xe /tmp/jenkins2779628266748132067.sh
+ /opt/gol_auto_test/test.sh /opt/gol_auto_test gol.asm 0
all constants declared properly
9580
9580
9580
8488
8488
Testing started
=========
Running change_steps, tid = 0
Running change_steps, tid = 1
Running change_steps, tid = 2
Running change_steps, tid = 3
Running change_steps, tid = 4
Running change_steps, tid = 5
Running change_steps, tid = 6
Running change_steps, tid = 7
Running reset_game, tid = 0
Running pause_game, tid = 0
Running pause_game, tid = 1
Running cell_fate, tid = 0
Running cell_fate, tid = 1
Running cell_fate, tid = 2
Running cell_fate, tid = 3
Running cell_fate, tid = 4
Running cell_fate, tid = 5
Running cell_fate, tid = 6
Running cell_fate, tid = 7
Running change_speed, tid = 0
Running change_speed, tid = 1
Running change_speed, tid = 2
Running change_speed, tid = 3
Running increment_seed, tid = 0
Running increment_seed, tid = 1
Running increment_seed, tid = 2
Running get_input, tid = 0
Running mask, tid = 0
Running mask, tid = 1
Running draw_gsa, tid = 0
Running draw_gsa, tid = 1
Running draw_gsa, tid = 2
Running set_gsa, tid = 0
Running set_gsa, tid = 1
Running update_gsa, tid = 0
Running update_gsa, tid = 1
Running clear_leds, tid = 0
Running select_action, tid = 0
Running select_action, tid = 1
Running select_action, tid = 2
Running select_action, tid = 3
Running select_action, tid = 4
Running select_action, tid = 5
Running select_action, tid = 6
Running select_action, tid = 7
Running select_action, tid = 8
Running select_action, tid = 9
Running update_state, tid = 0
Running update_state, tid = 1
Running update_state, tid = 2
Running update_state, tid = 3
Running update_state, tid = 4
Running update_state, tid = 5
Running update_state, tid = 6
Running update_state, tid = 7
Running update_state, tid = 8
Running update_state, tid = 9
Running update_state, tid = 10
Running update_state, tid = 11
Running update_state, tid = 12
Running update_state, tid = 13
Running find_neighbours, tid = 0
Running find_neighbours, tid = 1
Running find_neighbours, tid = 2
Running find_neighbours, tid = 3
Running find_neighbours, tid = 4
Running find_neighbours, tid = 5
Running find_neighbours, tid = 6
Running find_neighbours, tid = 7
Running find_neighbours, tid = 8
Running set_pixel, tid = 0
Running set_pixel, tid = 1
Running set_pixel, tid = 2
Running set_pixel, tid = 3
Running get_gsa, tid = 0
Running get_gsa, tid = 1
Running get_gsa, tid = 2
Running decrement_step, tid = 0
Running decrement_step, tid = 1
Running decrement_step, tid = 2
Running decrement_step, tid = 3
=========
Testing finished

======== Testing summary ========
Test change_steps: passed (Changes the number of steps in the INIT state with a random button combination)
Test change_steps: passed (Changes the number of steps in the INIT state with a random button combination)
Test change_steps: passed (Changes the number of steps in the INIT state with a random button combination)
Test change_steps: passed (Changes the number of steps in the INIT state with a random button combination)
Test change_steps: passed (Changes the number of steps in the INIT state with a random button combination)
Test change_steps: passed (Changes the number of steps in the INIT state with a random button combination)
Test change_steps: passed (Changes the number of steps in the INIT state with a random button combination)
Test change_steps: passed (Changes the number of steps in the INIT state with a random button combination)
Test change_steps: 8 out of 8 passed -> Score: 5 / 5
Test reset_game: build or execution failed (reset_game from a completely random memory state), returncode=(1)
Test reset_game: 0 out of 1 passed -> Score: 0 / 5
Test pause_game: passed (changes the paused state from a random paused state)
Test pause_game: passed (changes the paused state again)
Test pause_game: 2 out of 2 passed -> Score: 5 / 5
Test cell_fate: passed (random cell fate)
Test cell_fate: passed (random cell fate)
Test cell_fate: passed (random cell fate)
Test cell_fate: passed (random cell fate)
Test cell_fate: passed (random cell fate)
Test cell_fate: passed (random cell fate)
Test cell_fate: passed (random cell fate)
Test cell_fate: passed (random cell fate)
Test cell_fate: 8 out of 8 passed -> Score: 5 / 5
Test change_speed: passed (increments the speed)
Test change_speed: passed (decrements the speed)
Test change_speed: passed (increments the speed at max speed)
Test change_speed: passed (decrements the speed at min speed)
Test change_speed: 4 out of 4 passed -> Score: 5 / 5
Test increment_seed: build or execution failed (Increments the seed from a random number), returncode=(1)
Test increment_seed: build or execution failed (Increments the seed from a random number), returncode=(1)
Test increment_seed: failed (Increments the seed from N_SEEDS)
Test increment_seed: 0 out of 3 passed -> Score: 0 / 5
Test get_input: passed (random button pressed)
Test get_input: 1 out of 1 passed -> Score: 5 / 5
Test mask: build or execution failed (Mask a random GSA), returncode=(1)
Test mask: build or execution failed (Mask a random GSA), returncode=(1)
Test mask: 0 out of 2 passed -> Score: 0 / 5
Test draw_gsa: passed (Draws a random gsa on the leds)
Test draw_gsa: passed (Draws a random gsa on the leds)
Test draw_gsa: passed (Draws a random gsa on the leds)
Test draw_gsa: 3 out of 3 passed -> Score: 10 / 10
Test set_gsa: passed (set a horizontal gsa line to some value)
Test set_gsa: passed (erase a previously set line with some new value)
Test set_gsa: 2 out of 2 passed -> Score: 3 / 3
Test update_gsa: build or execution failed (update gsa  from a random state), returncode=(-9)
Test update_gsa: passed (update gsa  from a random state)
Test update_gsa: 1 out of 2 passed -> Score: 5 / 10
Test clear_leds: passed (clear_leds on a random screen)
Test clear_leds: 1 out of 1 passed -> Score: 2 / 2
Test select_action: passed (Random state, random button)
Test select_action: passed (Random state, random button)
Test select_action: passed (Random state, random button)
Test select_action: passed (Random state, random button)
Test select_action: passed (Random state, random button)
Test select_action: passed (Random state, random button)
Test select_action: passed (Random state, random button)
Test select_action: passed (Random state, random button)
Test select_action: passed (Random state, random button)
Test select_action: passed (Random state, random button)
Test select_action: 10 out of 10 passed -> Score: 10 / 10
Test update_state: passed (INIT, steps buttons)
Test update_state: passed (INIT, steps buttons)
Test update_state: passed (INIT, steps buttons)
Test update_state: passed (INIT, button 1)
Test update_state: passed (INIT, SEED = N_SEEDS)
Test update_state: passed (RAND, steps buttons)
Test update_state: passed (RAND, steps buttons)
Test update_state: passed (RAND, steps buttons)
Test update_state: passed (RAND, button 1)
Test update_state: passed (RAND, button 0)
Test update_state: passed (RUN, button 0)
Test update_state: passed (RUN, button 1)
Test update_state: passed (RUN, button 3)
Test update_state: passed (RUN, button 4)
Test update_state: 14 out of 14 passed -> Score: 5 / 5
Test find_neighbours: passed (random_neighbours count)
Test find_neighbours: passed (random neighbours count)
Test find_neighbours: passed (random neighbours count)
Test find_neighbours: passed (random neighbours count)
Test find_neighbours: passed (random neighbours count)
Test find_neighbours: passed (random neighbours count)
Test find_neighbours: passed (random neighbours count)
Test find_neighbours: passed (random neighbours count)
Test find_neighbours: passed (random neighbours count)
Test find_neighbours: 9 out of 9 passed -> Score: 10 / 10
Test set_pixel: passed (set_pixel setting some pixel on empty screen)
Test set_pixel: passed (set_pixel setting some pixel on non empty screen when writting on LEDS[0])
Test set_pixel: passed (set_pixel setting some pixel on non empty screen when writting on LEDS[1])
Test set_pixel: passed (set_pixel setting some pixel on non empty screen when writting on LEDS[2])
Test set_pixel: 4 out of 4 passed -> Score: 2 / 2
Test get_gsa: passed (get a random line from a random gsa)
Test get_gsa: passed (gets another random line from a random gsa)
Test get_gsa: passed (gets another random line from a random gsa)
Test get_gsa: 3 out of 3 passed -> Score: 3 / 3
Test decrement_step: passed (decrement step, random PAUSED state)
Test decrement_step: passed (decrement step, random RUNNING state)
Test decrement_step: passed (decrement step, random PAUSED state)
Test decrement_step: passed (decrement step, random RUNNING state)
Test decrement_step: 4 out of 4 passed -> Score: 5 / 5
======== Total score: 80 / 100 ========
Note that 100% score corresponds to 80% of the maximum possible score on the
project. For the remaining 20% you will need to make a successful live
demonstration of the game to the Teaching Assistants.

Archiving artifacts
Finished: SUCCESS
